#基于merge sort 的计算逆序数的方法
def merge(inputList,left,mid,right):
    n_L = mid - left + 1
    n_R = right - mid
    inverseNum = 0
    L = [0] * n_L
    R = [0] * n_R
    for i in range(n_L):
        L[i] = inputList[left+i]
    for j in range(n_R):
        R[j] = inputList[mid+1+j]
    i = 0
    j = 0
    key = left
    while i < n_L and j < n_R:
        if L[i] > R[j]:
            inverseNum += (n_L - i) #关键改动：左侧数字大于右侧数字的时候，此后所有的数字都是逆序，因为这里的inputList是排好序的
            inputList[key] = L[i]
            i += 1
        else:
            inputList[key] = R[j]
            j += 1
        key += 1
    while i < n_L:
        inputList[key] = L[i]
        i += 1 
        key += 1
    while j < n_R:
        inputList[key] = R[j]
        j += 1 
        key += 1
    return inverseNum #最终merge应该回归一个逆序值

def merge_count(inputList,left,right):
    if left >= right:
        return 0 #这里的return不能是原先的空，因为最后要返回的是逆序值1
    mid = (left + right) // 2
    inverseNum = merge_count(inputList,left,mid)
    inverseNum += merge_count(inputList,mid+1,right)
    inverseNum += merge(inputList,left,mid,right)
    return inverseNum

numList = [4,1,3,2]
print("逆序数为:",merge_count(numList,0,len(numList)-1))

